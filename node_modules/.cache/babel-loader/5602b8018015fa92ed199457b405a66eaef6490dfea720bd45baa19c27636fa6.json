{"ast":null,"code":"var _jsxFileName = \"/home/samuel/kommuent/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QrScanner from 'react-qr-scanner';\nimport net from 'net'; // Import net for TCP/IP\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrData, setQrData] = useState('');\n  const [tcpClient, setTcpClient] = useState(null);\n  const [mirroringDeviceId, setMirroringDeviceId] = useState(null);\n\n  // Fetch devices connected via ADB\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n\n  // Start mirroring via USB and fetch QR code\n  const startMirroringUsb = async deviceId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n      console.log(`Started mirroring for device: ${deviceId}`);\n      setMirroringDeviceId(deviceId);\n      const qrCodeData = `data:image/png;base64,${response.data.qrCode}`;\n      console.log(\"QR Code Data:\", qrCodeData); // Log QR code data\n      setQrData(qrCodeData);\n    } catch (error) {\n      console.error('Error starting screen mirroring via USB:', error);\n    }\n  };\n\n  // Scan for available WiFi networks\n  const scanWifi = async deviceId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n\n  // Connect to WiFi network and start mirroring via WiFi\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', {\n        ssid,\n        password,\n        deviceId: selectedDeviceId\n      });\n      setWifiNetworks([]);\n      startMirroringWifi(selectedDeviceId);\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n\n  // Start mirroring via WiFi\n  const startMirroringWifi = async deviceId => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', {\n        deviceId\n      });\n    } catch (error) {\n      console.error('Error starting screen mirroring via WiFi:', error);\n    }\n  };\n\n  // Handle QR code scanning and connect via TCP/IP\n  const handleScan = async data => {\n    if (data) {\n      setQrData(data);\n      try {\n        // Verify the QR code\n        const verificationResponse = await axios.post('http://localhost:4000/verify_qr', {\n          qrCode: data\n        });\n        if (verificationResponse.data.verified) {\n          const {\n            ip,\n            port\n          } = JSON.parse(data); // Extract IP and port from QR code data\n\n          // Create a TCP/IP client and connect\n          const client = new net.Socket();\n          client.connect(port, ip, () => {\n            console.log('Connected to server via QR code');\n            setTcpClient(client);\n          });\n          client.on('data', data => {\n            console.log('Data received from server:', data.toString());\n            // Handle screen data here\n          });\n          client.on('close', () => {\n            console.log('Connection closed');\n            setTcpClient(null);\n          });\n          client.on('error', error => {\n            console.error('Connection error:', error);\n            setTcpClient(null);\n          });\n        }\n      } catch (error) {\n        console.error('Error verifying QR code:', error);\n      }\n    }\n  };\n  const handleError = err => {\n    console.error(err);\n  };\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box green-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Android Devices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Android not found? Make sure \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"Android USB Debugging\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 43\n          }, this), \" is enabled. Windows users need to install \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"ADB Drivers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 123\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Using Android SDK ADB server. \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fetchDevices,\n            children: \"Force Restart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 44\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), devices.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Connected Devices:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: devices.map(device => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"device-list-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: showSerial ? device.id : device.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: playIcon,\n                alt: \"Play\",\n                className: \"icon\",\n                onClick: () => startMirroringUsb(device.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: wifiIcon,\n                alt: \"WiFi\",\n                className: \"icon\",\n                onClick: () => scanWifi(device.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: forwardArrowIcon,\n                alt: \"Forward Arrow\",\n                className: \"icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 21\n              }, this)]\n            }, device.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box middle-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Connect by scanning the QR code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"qr-code\",\n          children: qrData && mirroringDeviceId && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: qrData,\n            alt: \"QR Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QrScanner, {\n          delay: 300,\n          onError: handleError,\n          onScan: handleScan,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box blue-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"iOS Devices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No iOS devices are connected.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"Download\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 14\n          }, this), \" Kommuent for iOS on the App Store and launch the app on your iOS device.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"iOS device not found? Ensure the iOS device is unlocked and connected with a Lightning data cable. Click \\\"Trust Computer\\\" on your iOS when prompted. You may need to disconnect and reconnect your iOS device after trusting the connection.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Windows users will also need to install the \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"AppleMobileDeviceSupport\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 58\n          }, this), \" drivers and services package.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"Kommuent Dongle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 14\n          }, this), \" not found. Mirroring only mode. Windows users must install a \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"driver\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 107\n          }, this), \" for ESP32 dongles.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), wifiNetworks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wifi-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select WiFi Network\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: wifiNetworks.map(network => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: network.ssid\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Password\",\n            id: `password-${network.ssid}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => connectWifi(network.ssid, document.getElementById(`password-${network.ssid}`).value),\n            children: \"Connect\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 17\n          }, this)]\n        }, network.ssid, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"n8RCsXymxhCf6G1p1hdKfnb7Dpc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","QrScanner","net","wifiIcon","playIcon","forwardArrowIcon","jsxDEV","_jsxDEV","App","_s","devices","setDevices","showSerial","setShowSerial","wifiNetworks","setWifiNetworks","selectedDeviceId","setSelectedDeviceId","qrData","setQrData","tcpClient","setTcpClient","mirroringDeviceId","setMirroringDeviceId","fetchDevices","response","get","data","error","console","startMirroringUsb","deviceId","log","qrCodeData","qrCode","scanWifi","connectWifi","ssid","password","post","startMirroringWifi","handleScan","verificationResponse","verified","ip","port","JSON","parse","client","Socket","connect","on","toString","handleError","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","onClick","length","map","device","id","name","src","alt","delay","onError","onScan","style","width","network","type","placeholder","document","getElementById","value","_c","$RefreshReg$"],"sources":["/home/samuel/kommuent/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QrScanner from 'react-qr-scanner';\nimport net from 'net'; // Import net for TCP/IP\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\n\nfunction App() {\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrData, setQrData] = useState('');\n  const [tcpClient, setTcpClient] = useState(null);\n  const [mirroringDeviceId, setMirroringDeviceId] = useState(null);\n\n  // Fetch devices connected via ADB\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n\n  // Start mirroring via USB and fetch QR code\n  const startMirroringUsb = async (deviceId) => {\n    try {\n        const response = await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n        console.log(`Started mirroring for device: ${deviceId}`);\n        setMirroringDeviceId(deviceId);\n        \n        const qrCodeData = `data:image/png;base64,${response.data.qrCode}`;\n        console.log(\"QR Code Data:\", qrCodeData);  // Log QR code data\n        setQrData(qrCodeData);\n    } catch (error) {\n        console.error('Error starting screen mirroring via USB:', error);\n    }\n};\n\n  // Scan for available WiFi networks\n  const scanWifi = async (deviceId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n\n  // Connect to WiFi network and start mirroring via WiFi\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', { ssid, password, deviceId: selectedDeviceId });\n      setWifiNetworks([]);\n      startMirroringWifi(selectedDeviceId);\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n\n  // Start mirroring via WiFi\n  const startMirroringWifi = async (deviceId) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', { deviceId });\n    } catch (error) {\n      console.error('Error starting screen mirroring via WiFi:', error);\n    }\n  };\n\n  // Handle QR code scanning and connect via TCP/IP\n  const handleScan = async (data) => {\n    if (data) {\n      setQrData(data);\n      try {\n        // Verify the QR code\n        const verificationResponse = await axios.post('http://localhost:4000/verify_qr', { qrCode: data });\n        if (verificationResponse.data.verified) {\n          const { ip, port } = JSON.parse(data); // Extract IP and port from QR code data\n\n          // Create a TCP/IP client and connect\n          const client = new net.Socket();\n          client.connect(port, ip, () => {\n            console.log('Connected to server via QR code');\n            setTcpClient(client);\n          });\n\n          client.on('data', (data) => {\n            console.log('Data received from server:', data.toString());\n            // Handle screen data here\n          });\n\n          client.on('close', () => {\n            console.log('Connection closed');\n            setTcpClient(null);\n          });\n\n          client.on('error', (error) => {\n            console.error('Connection error:', error);\n            setTcpClient(null);\n          });\n        }\n      } catch (error) {\n        console.error('Error verifying QR code:', error);\n      }\n    }\n  };\n\n  const handleError = (err) => {\n    console.error(err);\n  };\n\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"box green-box\">\n          <h2>Android Devices</h2>\n          <p>No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.</p>\n          <p>Android not found? Make sure <a href=\"#\">Android USB Debugging</a> is enabled. Windows users need to install <a href=\"#\">ADB Drivers</a>.</p>\n          <p>Using Android SDK ADB server. <button onClick={fetchDevices}>Force Restart</button></p>\n          {devices.length > 0 && (\n            <div>\n              <h3>Connected Devices:</h3>\n              <ul>\n                {devices.map(device => (\n                  <li key={device.id} className=\"device-list-item\">\n                    <span>{showSerial ? device.id : device.name}</span>\n                    <img\n                      src={playIcon}\n                      alt=\"Play\"\n                      className=\"icon\"\n                      onClick={() => startMirroringUsb(device.id)}\n                    />\n                    <img\n                      src={wifiIcon}\n                      alt=\"WiFi\"\n                      className=\"icon\"\n                      onClick={() => scanWifi(device.id)}\n                    />\n                    <img\n                      src={forwardArrowIcon}\n                      alt=\"Forward Arrow\"\n                      className=\"icon\"\n                    />\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n        <div className=\"box middle-box\">\n          <h2>Connect by scanning the QR code</h2>\n          <div className=\"qr-code\">\n            {qrData && mirroringDeviceId && <img src={qrData} alt=\"QR Code\" />}\n          </div>\n          <QrScanner\n            delay={300}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: '100%' }}\n          />\n        </div>\n        <div className=\"box blue-box\">\n          <h2>iOS Devices</h2>\n          <p>No iOS devices are connected.</p>\n          <p><a href=\"#\">Download</a> Kommuent for iOS on the App Store and launch the app on your iOS device.</p>\n          <p>iOS device not found? Ensure the iOS device is unlocked and connected with a Lightning data cable. Click \"Trust Computer\" on your iOS when prompted. You may need to disconnect and reconnect your iOS device after trusting the connection.</p>\n          <p>Windows users will also need to install the <a href=\"#\">AppleMobileDeviceSupport</a> drivers and services package.</p>\n          <p><a href=\"#\">Kommuent Dongle</a> not found. Mirroring only mode. Windows users must install a <a href=\"#\">driver</a> for ESP32 dongles.</p>\n          <button>Refresh</button>\n        </div>\n      </div>\n      {wifiNetworks.length > 0 && (\n        <div className=\"wifi-modal\">\n          <h3>Select WiFi Network</h3>\n          <ul>\n            {wifiNetworks.map(network => (\n              <li key={network.ssid}>\n                <span>{network.ssid}</span>\n                <input type=\"password\" placeholder=\"Password\" id={`password-${network.ssid}`} />\n                <button onClick={() => connectWifi(network.ssid, document.getElementById(`password-${network.ssid}`).value)}>Connect</button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}