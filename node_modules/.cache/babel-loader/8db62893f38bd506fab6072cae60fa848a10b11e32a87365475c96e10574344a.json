{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import QrScanner from'react-qr-scanner';import logo from'./logo.png';import net from'net';// Import net for TCP/IP\nimport'./App.css';import wifiIcon from'./wifi_PNG62346.png';import playIcon from'./play_icon.png';import forwardArrowIcon from'./forward_arrow_icon.png';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[devices,setDevices]=useState([]);const[showSerial,setShowSerial]=useState(false);const[wifiNetworks,setWifiNetworks]=useState([]);const[selectedDeviceId,setSelectedDeviceId]=useState(null);const[qrData,setQrData]=useState('');const[previousDevices,setPreviousDevices]=useState([]);// State to store previously connected devices\nconst[tcpClient,setTcpClient]=useState(null);const[mirroringDeviceId,setMirroringDeviceId]=useState(null);// Fetch devices connected via ADB\nconst fetchDevices=async()=>{try{const response=await axios.get('http://localhost:4000/devices');setDevices(response.data);}catch(error){console.error('Error fetching devices:',error);}};const startMirroringUsb=async deviceId=>{try{console.log(\"Requesting mirroring for device: \".concat(deviceId));const response=await axios.get(\"http://localhost:4000/mirror/usb/\".concat(deviceId));console.log(\"Mirroring started for device: \".concat(deviceId));console.log('QR Code data received:',response.data.qrCode);setMirroringDeviceId(deviceId);// Fetch the QR code for the device\nconst newQrData=\"data:image/png;base64,\".concat(response.data.qrCode);setQrData(newQrData);// Store the device and its QR code in the previously connected devices list\nsetPreviousDevices(prev=>[...prev.filter(device=>device.id!==deviceId),// Remove existing device entry if exists\n{id:deviceId,qrCode:newQrData}]);}catch(error){console.error('Error starting screen mirroring via USB:',error);}};// Scan for available WiFi networks\nconst scanWifi=async deviceId=>{try{const response=await axios.get(\"http://localhost:4000/wifi/\".concat(deviceId));setWifiNetworks(response.data);setSelectedDeviceId(deviceId);}catch(error){console.error('Error scanning WiFi networks:',error);}};// Connect to WiFi network and start mirroring via WiFi\nconst connectWifi=async(ssid,password)=>{try{await axios.post('http://localhost:4000/connect_wifi',{ssid,password,deviceId:selectedDeviceId});setWifiNetworks([]);startMirroringWifi(selectedDeviceId);}catch(error){console.error('Error connecting to WiFi:',error);}};// Start mirroring via WiFi\nconst startMirroringWifi=async deviceId=>{try{await axios.post('http://localhost:4000/connect_wifi',{deviceId});}catch(error){console.error('Error starting screen mirroring via WiFi:',error);}};// Handle QR code scanning and connect via TCP/IP\nconst handleScan=async data=>{if(data){setQrData(data);try{// Verify the QR code\nconst verificationResponse=await axios.post('http://localhost:4000/verify_qr',{qrCode:data});if(verificationResponse.data.verified){const{ip,port}=JSON.parse(data);// Extract IP and port from QR code data\n// Create a TCP/IP client and connect\nconst client=new net.Socket();client.connect(port,ip,()=>{console.log('Connected to server via QR code');setTcpClient(client);});client.on('data',data=>{console.log('Data received from server:',data.toString());// Handle screen data here\n});client.on('close',()=>{console.log('Connection closed');setTcpClient(null);});client.on('error',error=>{console.error('Connection error:',error);setTcpClient(null);});}}catch(error){console.error('Error verifying QR code:',error);}}};const handleError=err=>{console.error(err);};useEffect(()=>{fetchDevices();},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"box green-box\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Android Devices\"}),/*#__PURE__*/_jsx(\"p\",{children:\"No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Android not found? Make sure \",/*#__PURE__*/_jsx(\"a\",{href:\"#\",children:\"Android USB Debugging\"}),\" is enabled. Windows users need to install \",/*#__PURE__*/_jsx(\"a\",{href:\"#\",children:\"ADB Drivers\"}),\".\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Using Android SDK ADB server. \",/*#__PURE__*/_jsx(\"button\",{onClick:fetchDevices,children:\"Force Restart\"})]}),devices.length>0&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Connected Devices:\"}),/*#__PURE__*/_jsx(\"ul\",{children:devices.map(device=>/*#__PURE__*/_jsxs(\"li\",{className:\"device-list-item\",children:[/*#__PURE__*/_jsx(\"span\",{children:showSerial?device.id:device.name}),/*#__PURE__*/_jsx(\"img\",{src:playIcon,alt:\"Play\",className:\"icon\",onClick:()=>startMirroringUsb(device.id)}),/*#__PURE__*/_jsx(\"img\",{src:wifiIcon,alt:\"WiFi\",className:\"icon\",onClick:()=>scanWifi(device.id)}),/*#__PURE__*/_jsx(\"img\",{src:forwardArrowIcon,alt:\"Forward Arrow\",className:\"icon\"})]},device.id))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"box middle-box\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Connect by scanning the QR code\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"qr-code\",children:[qrData&&mirroringDeviceId&&/*#__PURE__*/_jsx(\"img\",{src:qrData,alt:\"QR Code\"}),\" \",!qrData&&mirroringDeviceId&&/*#__PURE__*/_jsx(\"p\",{children:\"Loading QR code...\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"previous-devices\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Previously Connected Devices\"}),/*#__PURE__*/_jsx(\"ul\",{children:previousDevices.map(device=>/*#__PURE__*/_jsx(\"li\",{onClick:()=>setQrData(device.qrCode),children:/*#__PURE__*/_jsxs(\"span\",{children:[\"Device ID: \",device.id]})},device.id))})]}),/*#__PURE__*/_jsx(QrScanner,{delay:300,onError:handleError,onScan:handleScan,style:{width:'100%'}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"box blue-box\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"iOS Devices\"}),/*#__PURE__*/_jsx(\"p\",{children:\"No iOS devices are connected.\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"a\",{href:\"#\",children:\"Download\"}),\" Kommuent for iOS on the App Store and launch the app on your iOS device.\"]}),/*#__PURE__*/_jsx(\"p\",{children:\"iOS device not found? Ensure the iOS device is unlocked and connected with a Lightning data cable. Click \\\"Trust Computer\\\" on your iOS when prompted. You may need to disconnect and reconnect your iOS device after trusting the connection.\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Windows users will also need to install the \",/*#__PURE__*/_jsx(\"a\",{href:\"#\",children:\"AppleMobileDeviceSupport\"}),\" drivers and services package.\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"a\",{href:\"#\",children:\"Kommuent Dongle\"}),\" not found. Mirroring only mode. Windows users must install a \",/*#__PURE__*/_jsx(\"a\",{href:\"#\",children:\"driver\"}),\" for ESP32 dongles.\"]}),/*#__PURE__*/_jsx(\"button\",{children:\"Refresh\"})]})]}),wifiNetworks.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"wifi-modal\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Select WiFi Network\"}),/*#__PURE__*/_jsx(\"ul\",{children:wifiNetworks.map(network=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"span\",{children:network.ssid}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",id:\"password-\".concat(network.ssid)}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>connectWifi(network.ssid,document.getElementById(\"password-\".concat(network.ssid)).value),children:\"Connect\"})]},network.ssid))})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","axios","QrScanner","logo","net","wifiIcon","playIcon","forwardArrowIcon","jsx","_jsx","jsxs","_jsxs","App","devices","setDevices","showSerial","setShowSerial","wifiNetworks","setWifiNetworks","selectedDeviceId","setSelectedDeviceId","qrData","setQrData","previousDevices","setPreviousDevices","tcpClient","setTcpClient","mirroringDeviceId","setMirroringDeviceId","fetchDevices","response","get","data","error","console","startMirroringUsb","deviceId","log","concat","qrCode","newQrData","prev","filter","device","id","scanWifi","connectWifi","ssid","password","post","startMirroringWifi","handleScan","verificationResponse","verified","ip","port","JSON","parse","client","Socket","connect","on","toString","handleError","err","className","children","href","onClick","length","map","name","src","alt","delay","onError","onScan","style","width","network","type","placeholder","document","getElementById","value"],"sources":["/home/samuel/Kommuent.github.io/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QrScanner from 'react-qr-scanner';\nimport logo from './logo.png'\nimport net from 'net'; // Import net for TCP/IP\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\n\nfunction App() {\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrData, setQrData] = useState('');\n  const [previousDevices, setPreviousDevices] = useState([]); // State to store previously connected devices\n  const [tcpClient, setTcpClient] = useState(null);\n  const [mirroringDeviceId, setMirroringDeviceId] = useState(null);\n\n  // Fetch devices connected via ADB\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n\n  const startMirroringUsb = async (deviceId) => {\n    try {\n      console.log(`Requesting mirroring for device: ${deviceId}`);\n      const response = await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n      console.log(`Mirroring started for device: ${deviceId}`);\n      console.log('QR Code data received:', response.data.qrCode);\n  \n      setMirroringDeviceId(deviceId);\n  \n      // Fetch the QR code for the device\n      const newQrData = `data:image/png;base64,${response.data.qrCode}`;\n      setQrData(newQrData);\n  \n      // Store the device and its QR code in the previously connected devices list\n      setPreviousDevices(prev => [\n        ...prev.filter(device => device.id !== deviceId), // Remove existing device entry if exists\n        { id: deviceId, qrCode: newQrData }\n      ]);\n    } catch (error) {\n      console.error('Error starting screen mirroring via USB:', error);\n    }\n  };\n\n  // Scan for available WiFi networks\n  const scanWifi = async (deviceId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n\n  // Connect to WiFi network and start mirroring via WiFi\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', { ssid, password, deviceId: selectedDeviceId });\n      setWifiNetworks([]);\n      startMirroringWifi(selectedDeviceId);\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n\n  // Start mirroring via WiFi\n  const startMirroringWifi = async (deviceId) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', { deviceId });\n    } catch (error) {\n      console.error('Error starting screen mirroring via WiFi:', error);\n    }\n  };\n\n  // Handle QR code scanning and connect via TCP/IP\n  const handleScan = async (data) => {\n    if (data) {\n      setQrData(data);\n      try {\n        // Verify the QR code\n        const verificationResponse = await axios.post('http://localhost:4000/verify_qr', { qrCode: data });\n        if (verificationResponse.data.verified) {\n          const { ip, port } = JSON.parse(data); // Extract IP and port from QR code data\n\n          // Create a TCP/IP client and connect\n          const client = new net.Socket();\n          client.connect(port, ip, () => {\n            console.log('Connected to server via QR code');\n            setTcpClient(client);\n          });\n\n          client.on('data', (data) => {\n            console.log('Data received from server:', data.toString());\n            // Handle screen data here\n          });\n\n          client.on('close', () => {\n            console.log('Connection closed');\n            setTcpClient(null);\n          });\n\n          client.on('error', (error) => {\n            console.error('Connection error:', error);\n            setTcpClient(null);\n          });\n        }\n      } catch (error) {\n        console.error('Error verifying QR code:', error);\n      }\n    }\n  };\n\n  const handleError = (err) => {\n    console.error(err);\n  };\n\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"box green-box\">\n          <h2>Android Devices</h2>\n          <p>No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.</p>\n          <p>Android not found? Make sure <a href=\"#\">Android USB Debugging</a> is enabled. Windows users need to install <a href=\"#\">ADB Drivers</a>.</p>\n          <p>Using Android SDK ADB server. <button onClick={fetchDevices}>Force Restart</button></p>\n          {devices.length > 0 && (\n            <div>\n              <h3>Connected Devices:</h3>\n              <ul>\n                {devices.map(device => (\n                  <li key={device.id} className=\"device-list-item\">\n                    <span>{showSerial ? device.id : device.name}</span>\n                    <img\n                      src={playIcon}\n                      alt=\"Play\"\n                      className=\"icon\"\n                      onClick={() => startMirroringUsb(device.id)}\n                    />\n                    <img\n                      src={wifiIcon}\n                      alt=\"WiFi\"\n                      className=\"icon\"\n                      onClick={() => scanWifi(device.id)}\n                    />\n                    <img\n                      src={forwardArrowIcon}\n                      alt=\"Forward Arrow\"\n                      className=\"icon\"\n                    />\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n        <div className=\"box middle-box\">\n          <h2>Connect by scanning the QR code</h2>\n          <div className=\"qr-code\">\n            {qrData && mirroringDeviceId && <img src={qrData} alt=\"QR Code\" />} {/* Display QR Code only when mirroring starts */}\n            {!qrData && mirroringDeviceId && <p>Loading QR code...</p>}\n          </div>\n          \n          {/* List of previously connected devices with their QR codes */}\n          <div className=\"previous-devices\">\n            <h3>Previously Connected Devices</h3>\n            <ul>\n              {previousDevices.map(device => (\n                <li key={device.id} onClick={() => setQrData(device.qrCode)}>\n                  <span>Device ID: {device.id}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n            <QrScanner\n            delay={300}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: '100%' }}\n          />\n        </div>\n        <div className=\"box blue-box\">\n          <h2>iOS Devices</h2>\n          <p>No iOS devices are connected.</p>\n          <p><a href=\"#\">Download</a> Kommuent for iOS on the App Store and launch the app on your iOS device.</p>\n          <p>iOS device not found? Ensure the iOS device is unlocked and connected with a Lightning data cable. Click \"Trust Computer\" on your iOS when prompted. You may need to disconnect and reconnect your iOS device after trusting the connection.</p>\n          <p>Windows users will also need to install the <a href=\"#\">AppleMobileDeviceSupport</a> drivers and services package.</p>\n          <p><a href=\"#\">Kommuent Dongle</a> not found. Mirroring only mode. Windows users must install a <a href=\"#\">driver</a> for ESP32 dongles.</p>\n          <button>Refresh</button>\n        </div>\n      </div>\n      {wifiNetworks.length > 0 && (\n        <div className=\"wifi-modal\">\n          <h3>Select WiFi Network</h3>\n          <ul>\n            {wifiNetworks.map(network => (\n              <li key={network.ssid}>\n                <span>{network.ssid}</span>\n                <input type=\"password\" placeholder=\"Password\" id={`password-${network.ssid}`} />\n                <button onClick={() => connectWifi(network.ssid, document.getElementById(`password-${network.ssid}`).value)}>Connect</button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}