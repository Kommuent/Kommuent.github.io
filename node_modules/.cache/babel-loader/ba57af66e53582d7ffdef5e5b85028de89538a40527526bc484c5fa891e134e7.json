{"ast":null,"code":"var _jsxFileName = \"/home/samuel/kommuent/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QRCode from 'qrcode.react';\nimport QrScanner from 'react-qr-scanner';\nimport net from 'net'; // Import net for TCP/IP\n\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrData, setQrData] = useState('');\n  const [tcpClient, setTcpClient] = useState(null);\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n      if (response.data.length > 0) {\n        // Generate QR code for the connected device\n        const deviceId = response.data[0].id; // Assuming the first device in the list\n        const qrCodeResponse = await axios.get(`http://localhost:4000/generate_qr/${deviceId}`, {\n          responseType: 'blob'\n        });\n        const qrCodeUrl = URL.createObjectURL(qrCodeResponse.data);\n        setQrData(qrCodeUrl);\n      } else {\n        setQrData(''); // No devices connected, clear the QR code\n      }\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n  const startMirroringUsb = async deviceId => {\n    try {\n      await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n      console.log(`Started mirroring for device: ${deviceId}`);\n    } catch (error) {\n      console.error('Error starting screen mirroring via USB:', error);\n    }\n  };\n  const scanWifi = async deviceId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', {\n        ssid,\n        password,\n        deviceId: selectedDeviceId\n      });\n      setWifiNetworks([]);\n      startMirroringWifi(selectedDeviceId); // Start mirroring after connecting to WiFi\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n  const startMirroringWifi = async deviceId => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', {\n        deviceId\n      });\n    } catch (error) {\n      console.error('Error starting screen mirroring via WiFi:', error);\n    }\n  };\n  const handleScan = async data => {\n    if (data) {\n      setQrData(data);\n      try {\n        // Verify that the scanned QR code is from the Kommuent app\n        const verificationResponse = await axios.post('http://localhost:4000/qr-mirror', {\n          data\n        });\n        if (verificationResponse.data === 'Mirroring started via QR') {\n          // Extract IP and port from the QR code data\n          const [ip, port] = data.split(':');\n\n          // Create TCP/IP client and connect to server\n          const client = new net.Socket();\n          client.connect(port, ip, () => {\n            console.log('Connected to server via QR code');\n            setTcpClient(client);\n          });\n          client.on('data', data => {\n            console.log('Data received from server:', data.toString());\n            // Handle the screen data here\n          });\n          client.on('close', () => {\n            console.log('Connection closed');\n            setTcpClient(null);\n          });\n        } else {\n          console.error('QR code verification failed');\n        }\n      } catch (error) {\n        console.error('Error starting mirroring via QR:', error);\n      }\n    }\n  };\n  const handleError = err => {\n    console.error(err);\n  };\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box green-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Android Devices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Android not found? Make sure \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"Android USB Debugging\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 43\n          }, this), \" is enabled. Windows users need to install \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"ADB Drivers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 123\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Using Android SDK ADB server. \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fetchDevices,\n            children: \"Force Restart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 44\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), devices.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Connected Devices:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: devices.map(device => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"device-list-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: showSerial ? device.id : device.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: playIcon,\n                alt: \"Play\",\n                className: \"icon\",\n                onClick: () => startMirroringUsb(device.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: wifiIcon,\n                alt: \"WiFi\",\n                className: \"icon\",\n                onClick: () => scanWifi(device.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: forwardArrowIcon,\n                alt: \"Forward Arrow\",\n                className: \"icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 21\n              }, this)]\n            }, device.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box middle-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Connect by scanning the QR code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"qr-code\",\n          children: qrData && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: qrData,\n            alt: \"QR Code\",\n            style: {\n              width: '180px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QrScanner, {\n          delay: 300,\n          onError: handleError,\n          onScan: handleScan,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box blue-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"iOS Devices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No iOS devices are connected.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"Download\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 14\n          }, this), \" Kommuent for iOS on the App Store and launch the app on your iOS device.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"iOS device not found? Ensure the iOS device is unlocked and connected with a Lightning data cable. Click \\\"Trust Computer\\\" on your iOS when prompted. You may need to disconnect and reconnect your iOS device after trusting the connection.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Windows users will also need to install the \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"AppleMobileDeviceSupport\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 58\n          }, this), \" drivers and services package.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"Kommuent Dongle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 14\n          }, this), \" not found. Mirroring only mode. Windows users must install a \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"driver\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 107\n          }, this), \" for ESP32 dongles.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), wifiNetworks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wifi-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select WiFi Network\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: wifiNetworks.map(network => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: network.ssid\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Password\",\n            id: `password-${network.ssid}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => connectWifi(network.ssid, document.getElementById(`password-${network.ssid}`).value),\n            children: \"Connect\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 17\n          }, this)]\n        }, network.ssid, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vh7M48x3EJBrzgVHAR+BVlLQDRw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","QRCode","QrScanner","net","wifiIcon","playIcon","forwardArrowIcon","jsxDEV","_jsxDEV","App","_s","devices","setDevices","showSerial","setShowSerial","wifiNetworks","setWifiNetworks","selectedDeviceId","setSelectedDeviceId","qrData","setQrData","tcpClient","setTcpClient","fetchDevices","response","get","data","length","deviceId","id","qrCodeResponse","responseType","qrCodeUrl","URL","createObjectURL","error","console","startMirroringUsb","log","scanWifi","connectWifi","ssid","password","post","startMirroringWifi","handleScan","verificationResponse","ip","port","split","client","Socket","connect","on","toString","handleError","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","onClick","map","device","name","src","alt","style","width","delay","onError","onScan","network","type","placeholder","document","getElementById","value","_c","$RefreshReg$"],"sources":["/home/samuel/kommuent/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QRCode from 'qrcode.react';\nimport QrScanner from 'react-qr-scanner';\nimport net from 'net'; // Import net for TCP/IP\n\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\n\nfunction App() {\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrData, setQrData] = useState('');\n  const [tcpClient, setTcpClient] = useState(null);\n\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n      if (response.data.length > 0) {\n        // Generate QR code for the connected device\n        const deviceId = response.data[0].id; // Assuming the first device in the list\n        const qrCodeResponse = await axios.get(`http://localhost:4000/generate_qr/${deviceId}`, { responseType: 'blob' });\n        const qrCodeUrl = URL.createObjectURL(qrCodeResponse.data);\n        setQrData(qrCodeUrl);\n      } else {\n        setQrData(''); // No devices connected, clear the QR code\n      }\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n\n  const startMirroringUsb = async (deviceId) => {\n    try {\n      await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n      console.log(`Started mirroring for device: ${deviceId}`);\n    } catch (error) {\n      console.error('Error starting screen mirroring via USB:', error);\n    }\n  };\n\n  const scanWifi = async (deviceId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', { ssid, password, deviceId: selectedDeviceId });\n      setWifiNetworks([]);\n      startMirroringWifi(selectedDeviceId); // Start mirroring after connecting to WiFi\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n\n  const startMirroringWifi = async (deviceId) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', { deviceId });\n    } catch (error) {\n      console.error('Error starting screen mirroring via WiFi:', error);\n    }\n  };\n\n  const handleScan = async (data) => {\n    if (data) {\n      setQrData(data);\n      try {\n        // Verify that the scanned QR code is from the Kommuent app\n        const verificationResponse = await axios.post('http://localhost:4000/qr-mirror', { data });\n        if (verificationResponse.data === 'Mirroring started via QR') {\n          // Extract IP and port from the QR code data\n          const [ip, port] = data.split(':');\n          \n          // Create TCP/IP client and connect to server\n          const client = new net.Socket();\n          client.connect(port, ip, () => {\n            console.log('Connected to server via QR code');\n            setTcpClient(client);\n          });\n\n          client.on('data', (data) => {\n            console.log('Data received from server:', data.toString());\n            // Handle the screen data here\n          });\n\n          client.on('close', () => {\n            console.log('Connection closed');\n            setTcpClient(null);\n          });\n        } else {\n          console.error('QR code verification failed');\n        }\n      } catch (error) {\n        console.error('Error starting mirroring via QR:', error);\n      }\n    }\n  };\n\n  const handleError = (err) => {\n    console.error(err);\n  };\n\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"box green-box\">\n          <h2>Android Devices</h2>\n          <p>No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.</p>\n          <p>Android not found? Make sure <a href=\"#\">Android USB Debugging</a> is enabled. Windows users need to install <a href=\"#\">ADB Drivers</a>.</p>\n          <p>Using Android SDK ADB server. <button onClick={fetchDevices}>Force Restart</button></p>\n          {devices.length > 0 && (\n            <div>\n              <h3>Connected Devices:</h3>\n              <ul>\n                {devices.map(device => (\n                  <li key={device.id} className=\"device-list-item\">\n                    <span>{showSerial ? device.id : device.name}</span>\n                    <img\n                      src={playIcon}\n                      alt=\"Play\"\n                      className=\"icon\"\n                      onClick={() => startMirroringUsb(device.id)}\n                    />\n                    <img\n                      src={wifiIcon}\n                      alt=\"WiFi\"\n                      className=\"icon\"\n                      onClick={() => scanWifi(device.id)}\n                    />\n                    <img\n                      src={forwardArrowIcon}\n                      alt=\"Forward Arrow\"\n                      className=\"icon\"\n                    />\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n        <div className=\"box middle-box\">\n          <h2>Connect by scanning the QR code</h2>\n          <div className=\"qr-code\">\n            {qrData && <img src={qrData} alt=\"QR Code\" style={{ width: '180px' }} />}\n          </div>\n          <QrScanner\n            delay={300}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: '100%' }}\n          />\n        </div>\n        <div className=\"box blue-box\">\n          <h2>iOS Devices</h2>\n          <p>No iOS devices are connected.</p>\n          <p><a href=\"#\">Download</a> Kommuent for iOS on the App Store and launch the app on your iOS device.</p>\n          <p>iOS device not found? Ensure the iOS device is unlocked and connected with a Lightning data cable. Click \"Trust Computer\" on your iOS when prompted. You may need to disconnect and reconnect your iOS device after trusting the connection.</p>\n          <p>Windows users will also need to install the <a href=\"#\">AppleMobileDeviceSupport</a> drivers and services package.</p>\n          <p><a href=\"#\">Kommuent Dongle</a> not found. Mirroring only mode. Windows users must install a <a href=\"#\">driver</a> for ESP32 dongles.</p>\n          <button>Refresh</button>\n        </div>\n      </div>\n      {wifiNetworks.length > 0 && (\n        <div className=\"wifi-modal\">\n          <h3>Select WiFi Network</h3>\n          <ul>\n            {wifiNetworks.map(network => (\n              <li key={network.ssid}>\n                <span>{network.ssid}</span>\n                <input type=\"password\" placeholder=\"Password\" id={`password-${network.ssid}`} />\n                <button onClick={() => connectWifi(network.ssid, document.getElementById(`password-${network.ssid}`).value)}>Connect</button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}