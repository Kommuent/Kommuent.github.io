{"ast":null,"code":"var _jsxFileName = \"/home/samuel/Kommuent.github.io/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QrScanner from 'react-qr-scanner';\nimport logo from './logo.png';\nimport net from 'net'; // Import net for TCP/IP\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrData, setQrData] = useState('');\n  const [previousDevices, setPreviousDevices] = useState([]); // State to store previously connected devices\n  const [tcpClient, setTcpClient] = useState(null);\n  const [mirroringDeviceId, setMirroringDeviceId] = useState(null);\n\n  // Fetch devices connected via ADB\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n  const startMirroringUsb = async deviceId => {\n    try {\n      console.log(`Requesting mirroring for device: ${deviceId}`);\n      const response = await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n      console.log(`Mirroring started for device: ${deviceId}`);\n      console.log('QR Code data received:', response.data.qrCode);\n      setMirroringDeviceId(deviceId);\n\n      // Fetch the QR code for the device\n      const newQrData = `data:image/png;base64,${response.data.qrCode}`;\n      setQrData(newQrData);\n\n      // Store the device and its QR code in the previously connected devices list\n      setPreviousDevices(prev => [...prev.filter(device => device.id !== deviceId),\n      // Remove existing device entry if exists\n      {\n        id: deviceId,\n        qrCode: newQrData\n      }]);\n    } catch (error) {\n      console.error('Error starting screen mirroring via USB:', error);\n    }\n  };\n\n  // Scan for available WiFi networks\n  const scanWifi = async deviceId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n\n  // Connect to WiFi network and start mirroring via WiFi\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', {\n        ssid,\n        password,\n        deviceId: selectedDeviceId\n      });\n      setWifiNetworks([]);\n      startMirroringWifi(selectedDeviceId);\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n\n  // Start mirroring via WiFi\n  const startMirroringWifi = async deviceId => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', {\n        deviceId\n      });\n    } catch (error) {\n      console.error('Error starting screen mirroring via WiFi:', error);\n    }\n  };\n\n  // Handle QR code scanning and connect via TCP/IP\n  const handleScan = async data => {\n    if (data) {\n      setQrData(data);\n      try {\n        // Verify the QR code\n        const verificationResponse = await axios.post('http://localhost:4000/verify_qr', {\n          qrCode: data\n        });\n        if (verificationResponse.data.verified) {\n          const {\n            ip,\n            port\n          } = JSON.parse(data); // Extract IP and port from QR code data\n\n          // Create a TCP/IP client and connect\n          const client = new net.Socket();\n          client.connect(port, ip, () => {\n            console.log('Connected to server via QR code');\n            setTcpClient(client);\n          });\n          client.on('data', data => {\n            console.log('Data received from server:', data.toString());\n            // Handle screen data here\n          });\n          client.on('close', () => {\n            console.log('Connection closed');\n            setTcpClient(null);\n          });\n          client.on('error', error => {\n            console.error('Connection error:', error);\n            setTcpClient(null);\n          });\n        }\n      } catch (error) {\n        console.error('Error verifying QR code:', error);\n      }\n    }\n  };\n  const handleError = err => {\n    console.error(err);\n  };\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box green-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Android Devices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Android not found? Make sure \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"Android USB Debugging\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 43\n          }, this), \" is enabled. Windows users need to install \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"ADB Drivers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 123\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Using Android SDK ADB server. \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fetchDevices,\n            children: \"Force Restart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 44\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), devices.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Connected Devices:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: devices.map(device => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"device-list-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: showSerial ? device.id : device.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: playIcon,\n                alt: \"Play\",\n                className: \"icon\",\n                onClick: () => startMirroringUsb(device.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: wifiIcon,\n                alt: \"WiFi\",\n                className: \"icon\",\n                onClick: () => scanWifi(device.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: forwardArrowIcon,\n                alt: \"Forward Arrow\",\n                className: \"icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 21\n              }, this)]\n            }, device.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box middle-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Connect by scanning the QR code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"qr-code\",\n          children: [qrData && mirroringDeviceId && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: qrData,\n            alt: \"QR Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 45\n          }, this), \" \", !qrData && mirroringDeviceId && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading QR code...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"previous-devices\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Previously Connected Devices\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: previousDevices.map(device => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => setQrData(device.qrCode),\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Device ID: \", device.id]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 19\n              }, this)\n            }, device.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QrScanner, {\n          delay: 300,\n          onError: handleError,\n          onScan: handleScan,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box blue-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"iOS Devices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No iOS devices are connected.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"Download\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 14\n          }, this), \" Kommuent for iOS on the App Store and launch the app on your iOS device.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"iOS device not found? Ensure the iOS device is unlocked and connected with a Lightning data cable. Click \\\"Trust Computer\\\" on your iOS when prompted. You may need to disconnect and reconnect your iOS device after trusting the connection.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Windows users will also need to install the \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"AppleMobileDeviceSupport\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 58\n          }, this), \" drivers and services package.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"Kommuent Dongle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 14\n          }, this), \" not found. Mirroring only mode. Windows users must install a \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"driver\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 107\n          }, this), \" for ESP32 dongles.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), wifiNetworks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wifi-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select WiFi Network\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: wifiNetworks.map(network => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: network.ssid\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Password\",\n            id: `password-${network.ssid}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => connectWifi(network.ssid, document.getElementById(`password-${network.ssid}`).value),\n            children: \"Connect\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }, this)]\n        }, network.ssid, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lJ0bsnxmRFTN9hTp3cYAWLqsTPI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","QrScanner","logo","net","wifiIcon","playIcon","forwardArrowIcon","jsxDEV","_jsxDEV","App","_s","devices","setDevices","showSerial","setShowSerial","wifiNetworks","setWifiNetworks","selectedDeviceId","setSelectedDeviceId","qrData","setQrData","previousDevices","setPreviousDevices","tcpClient","setTcpClient","mirroringDeviceId","setMirroringDeviceId","fetchDevices","response","get","data","error","console","startMirroringUsb","deviceId","log","qrCode","newQrData","prev","filter","device","id","scanWifi","connectWifi","ssid","password","post","startMirroringWifi","handleScan","verificationResponse","verified","ip","port","JSON","parse","client","Socket","connect","on","toString","handleError","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","onClick","length","map","name","src","alt","delay","onError","onScan","style","width","network","type","placeholder","document","getElementById","value","_c","$RefreshReg$"],"sources":["/home/samuel/Kommuent.github.io/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QrScanner from 'react-qr-scanner';\nimport logo from './logo.png';\nimport net from 'net'; // Import net for TCP/IP\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\n\nfunction App() {\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrData, setQrData] = useState('');\n  const [previousDevices, setPreviousDevices] = useState([]); // State to store previously connected devices\n  const [tcpClient, setTcpClient] = useState(null);\n  const [mirroringDeviceId, setMirroringDeviceId] = useState(null);\n\n  // Fetch devices connected via ADB\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n\n  const startMirroringUsb = async (deviceId) => {\n    try {\n      console.log(`Requesting mirroring for device: ${deviceId}`);\n      const response = await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n      console.log(`Mirroring started for device: ${deviceId}`);\n      console.log('QR Code data received:', response.data.qrCode);\n  \n      setMirroringDeviceId(deviceId);\n  \n      // Fetch the QR code for the device\n      const newQrData = `data:image/png;base64,${response.data.qrCode}`;\n      setQrData(newQrData);\n  \n      // Store the device and its QR code in the previously connected devices list\n      setPreviousDevices(prev => [\n        ...prev.filter(device => device.id !== deviceId), // Remove existing device entry if exists\n        { id: deviceId, qrCode: newQrData }\n      ]);\n    } catch (error) {\n      console.error('Error starting screen mirroring via USB:', error);\n    }\n  };\n\n  // Scan for available WiFi networks\n  const scanWifi = async (deviceId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n\n  // Connect to WiFi network and start mirroring via WiFi\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', { ssid, password, deviceId: selectedDeviceId });\n      setWifiNetworks([]);\n      startMirroringWifi(selectedDeviceId);\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n\n  // Start mirroring via WiFi\n  const startMirroringWifi = async (deviceId) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', { deviceId });\n    } catch (error) {\n      console.error('Error starting screen mirroring via WiFi:', error);\n    }\n  };\n\n  // Handle QR code scanning and connect via TCP/IP\n  const handleScan = async (data) => {\n    if (data) {\n      setQrData(data);\n      try {\n        // Verify the QR code\n        const verificationResponse = await axios.post('http://localhost:4000/verify_qr', { qrCode: data });\n        if (verificationResponse.data.verified) {\n          const { ip, port } = JSON.parse(data); // Extract IP and port from QR code data\n\n          // Create a TCP/IP client and connect\n          const client = new net.Socket();\n          client.connect(port, ip, () => {\n            console.log('Connected to server via QR code');\n            setTcpClient(client);\n          });\n\n          client.on('data', (data) => {\n            console.log('Data received from server:', data.toString());\n            // Handle screen data here\n          });\n\n          client.on('close', () => {\n            console.log('Connection closed');\n            setTcpClient(null);\n          });\n\n          client.on('error', (error) => {\n            console.error('Connection error:', error);\n            setTcpClient(null);\n          });\n        }\n      } catch (error) {\n        console.error('Error verifying QR code:', error);\n      }\n    }\n  };\n\n  const handleError = (err) => {\n    console.error(err);\n  };\n\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"box green-box\">\n          <h2>Android Devices</h2>\n          <p>No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.</p>\n          <p>Android not found? Make sure <a href=\"#\">Android USB Debugging</a> is enabled. Windows users need to install <a href=\"#\">ADB Drivers</a>.</p>\n          <p>Using Android SDK ADB server. <button onClick={fetchDevices}>Force Restart</button></p>\n          {devices.length > 0 && (\n            <div>\n              <h3>Connected Devices:</h3>\n              <ul>\n                {devices.map(device => (\n                  <li key={device.id} className=\"device-list-item\">\n                    <span>{showSerial ? device.id : device.name}</span>\n                    <img\n                      src={playIcon}\n                      alt=\"Play\"\n                      className=\"icon\"\n                      onClick={() => startMirroringUsb(device.id)}\n                    />\n                    <img\n                      src={wifiIcon}\n                      alt=\"WiFi\"\n                      className=\"icon\"\n                      onClick={() => scanWifi(device.id)}\n                    />\n                    <img\n                      src={forwardArrowIcon}\n                      alt=\"Forward Arrow\"\n                      className=\"icon\"\n                    />\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n        <div className=\"box middle-box\">\n          <h2>Connect by scanning the QR code</h2>\n          <div className=\"qr-code\">\n            {qrData && mirroringDeviceId && <img src={qrData} alt=\"QR Code\" />} {/* Display QR Code only when mirroring starts */}\n            {!qrData && mirroringDeviceId && <p>Loading QR code...</p>}\n          </div>\n          \n          {/* List of previously connected devices with their QR codes */}\n          <div className=\"previous-devices\">\n            <h3>Previously Connected Devices</h3>\n            <ul>\n              {previousDevices.map(device => (\n                <li key={device.id} onClick={() => setQrData(device.qrCode)}>\n                  <span>Device ID: {device.id}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n            <QrScanner\n            delay={300}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: '100%' }}\n          />\n        </div>\n        <div className=\"box blue-box\">\n          <h2>iOS Devices</h2>\n          <p>No iOS devices are connected.</p>\n          <p><a href=\"#\">Download</a> Kommuent for iOS on the App Store and launch the app on your iOS device.</p>\n          <p>iOS device not found? Ensure the iOS device is unlocked and connected with a Lightning data cable. Click \"Trust Computer\" on your iOS when prompted. You may need to disconnect and reconnect your iOS device after trusting the connection.</p>\n          <p>Windows users will also need to install the <a href=\"#\">AppleMobileDeviceSupport</a> drivers and services package.</p>\n          <p><a href=\"#\">Kommuent Dongle</a> not found. Mirroring only mode. Windows users must install a <a href=\"#\">driver</a> for ESP32 dongles.</p>\n          <button>Refresh</button>\n        </div>\n      </div>\n      {wifiNetworks.length > 0 && (\n        <div className=\"wifi-modal\">\n          <h3>Select WiFi Network</h3>\n          <ul>\n            {wifiNetworks.map(network => (\n              <li key={network.ssid}>\n                <span>{network.ssid}</span>\n                <input type=\"password\" placeholder=\"Password\" id={`password-${network.ssid}`} />\n                <button onClick={() => connectWifi(network.ssid, document.getElementById(`password-${network.ssid}`).value)}>Connect</button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}