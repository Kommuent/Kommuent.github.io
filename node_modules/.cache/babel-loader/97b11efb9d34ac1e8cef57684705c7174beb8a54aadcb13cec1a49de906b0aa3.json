{"ast":null,"code":"var _jsxFileName = \"/home/samuel/kommuent/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QRCode from 'qrcode.react';\nimport Mirroring from './Mirroring';\nimport QrScanner from 'react-qr-scanner';\nimport net from 'net'; // Import net for TCP/IP\n\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrData, setQrData] = useState('');\n  const [tcpClient, setTcpClient] = useState(null);\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n  const startMirroring = async deviceId => {\n    try {\n      await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n    } catch (error) {\n      console.error('Error starting screen mirroring:', error);\n    }\n  };\n  const scanWifi = async deviceId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', {\n        ssid,\n        password\n      });\n      setWifiNetworks([]);\n      startMirroring(selectedDeviceId); // Start mirroring after connecting to WiFi\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n  const handleScan = async data => {\n    if (data) {\n      setQrData(data);\n      try {\n        // Extract IP and port from the QR code data\n        const [ip, port] = data.split(':');\n\n        // Create TCP/IP client and connect to server\n        const client = new net.Socket();\n        client.connect(port, ip, () => {\n          console.log('Connected to server via QR code');\n          setTcpClient(client);\n        });\n        client.on('data', data => {\n          console.log('Data received from server:', data.toString());\n          // Handle the screen data here\n        });\n        client.on('close', () => {\n          console.log('Connection closed');\n          setTcpClient(null);\n        });\n      } catch (error) {\n        console.error('Error starting mirroring via QR:', error);\n      }\n    }\n  };\n  const handleError = err => {\n    console.error(err);\n  };\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box green-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Android Devices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Android not found? Make sure \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"Android USB Debugging\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 43\n          }, this), \" is enabled. Windows users need to install \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"ADB Drivers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 123\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Using Android SDK ADB server. \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fetchDevices,\n            children: \"Force Restart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 44\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), devices.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Connected Devices:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: devices.map(device => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"device-list-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: showSerial ? device.id : device.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: playIcon,\n                alt: \"Play\",\n                className: \"icon\",\n                onClick: () => startMirroring(device.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: wifiIcon,\n                alt: \"WiFi\",\n                className: \"icon\",\n                onClick: () => scanWifi(device.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: forwardArrowIcon,\n                alt: \"Forward Arrow\",\n                className: \"icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 21\n              }, this)]\n            }, device.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box middle-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Connect by scanning the QR code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"qr-code\",\n          children: selectedDeviceId ? /*#__PURE__*/_jsxDEV(QRCode, {\n            value: `mirror:${selectedDeviceId}`,\n            size: 180\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Connect a device to generate QR code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QrScanner, {\n          delay: 300,\n          onError: handleError,\n          onScan: handleScan,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box blue-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"iOS Devices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No iOS devices are connected. Please ensure the iOS device is connected with a data cable, and USB Debugging is enabled.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"iOS not found? Make sure \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"iOS USB Debugging\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 39\n          }, this), \" is enabled. Windows users need to install \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"ADB Drivers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 115\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Using iOS SDK ADB server. \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fetchDevices,\n            children: \"Force Restart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 40\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), wifiNetworks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wifi-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select WiFi Network\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: wifiNetworks.map((network, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => connectWifi(network.ssid, prompt('Enter password for ' + network.ssid)),\n          children: network.ssid\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vh7M48x3EJBrzgVHAR+BVlLQDRw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","QRCode","Mirroring","QrScanner","net","wifiIcon","playIcon","forwardArrowIcon","jsxDEV","_jsxDEV","App","_s","devices","setDevices","showSerial","setShowSerial","wifiNetworks","setWifiNetworks","selectedDeviceId","setSelectedDeviceId","qrData","setQrData","tcpClient","setTcpClient","fetchDevices","response","get","data","error","console","startMirroring","deviceId","scanWifi","connectWifi","ssid","password","post","handleScan","ip","port","split","client","Socket","connect","log","on","toString","handleError","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","onClick","length","map","device","id","name","src","alt","value","size","delay","onError","onScan","style","width","network","index","prompt","_c","$RefreshReg$"],"sources":["/home/samuel/kommuent/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QRCode from 'qrcode.react';\nimport Mirroring from './Mirroring';\nimport QrScanner from 'react-qr-scanner';\nimport net from 'net'; // Import net for TCP/IP\n\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\n\nfunction App() {\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrData, setQrData] = useState('');\n  const [tcpClient, setTcpClient] = useState(null);\n\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n\n  const startMirroring = async (deviceId) => {\n    try {\n      await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n    } catch (error) {\n      console.error('Error starting screen mirroring:', error);\n    }\n  };\n\n  const scanWifi = async (deviceId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', { ssid, password });\n      setWifiNetworks([]);\n      startMirroring(selectedDeviceId); // Start mirroring after connecting to WiFi\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n\n  const handleScan = async (data) => {\n    if (data) {\n      setQrData(data);\n      try {\n        // Extract IP and port from the QR code data\n        const [ip, port] = data.split(':');\n        \n        // Create TCP/IP client and connect to server\n        const client = new net.Socket();\n        client.connect(port, ip, () => {\n          console.log('Connected to server via QR code');\n          setTcpClient(client);\n        });\n\n        client.on('data', (data) => {\n          console.log('Data received from server:', data.toString());\n          // Handle the screen data here\n        });\n\n        client.on('close', () => {\n          console.log('Connection closed');\n          setTcpClient(null);\n        });\n        \n      } catch (error) {\n        console.error('Error starting mirroring via QR:', error);\n      }\n    }\n  };\n\n  const handleError = (err) => {\n    console.error(err);\n  };\n\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"box green-box\">\n          <h2>Android Devices</h2>\n          <p>No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.</p>\n          <p>Android not found? Make sure <a href=\"#\">Android USB Debugging</a> is enabled. Windows users need to install <a href=\"#\">ADB Drivers</a>.</p>\n          <p>Using Android SDK ADB server. <button onClick={fetchDevices}>Force Restart</button></p>\n          {devices.length > 0 && (\n            <div>\n              <h3>Connected Devices:</h3>\n              <ul>\n                {devices.map(device => (\n                  <li key={device.id} className=\"device-list-item\">\n                    <span>{showSerial ? device.id : device.name}</span>\n                    <img\n                      src={playIcon}\n                      alt=\"Play\"\n                      className=\"icon\"\n                      onClick={() => startMirroring(device.id)}\n                    />\n                    <img\n                      src={wifiIcon}\n                      alt=\"WiFi\"\n                      className=\"icon\"\n                      onClick={() => scanWifi(device.id)}\n                    />\n                    <img\n                      src={forwardArrowIcon}\n                      alt=\"Forward Arrow\"\n                      className=\"icon\"\n                    />\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n        <div className=\"box middle-box\">\n          <h2>Connect by scanning the QR code</h2>\n          <div className=\"qr-code\">\n            {selectedDeviceId ? (\n              <QRCode value={`mirror:${selectedDeviceId}`} size={180} />\n            ) : (\n              <p>Connect a device to generate QR code</p>\n            )}\n          </div>\n          <QrScanner\n            delay={300}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: '100%' }}\n          />\n        </div>\n        <div className=\"box blue-box\">\n          <h2>iOS Devices</h2>\n          <p>No iOS devices are connected. Please ensure the iOS device is connected with a data cable, and USB Debugging is enabled.</p>\n          <p>iOS not found? Make sure <a href=\"#\">iOS USB Debugging</a> is enabled. Windows users need to install <a href=\"#\">ADB Drivers</a>.</p>\n          <p>Using iOS SDK ADB server. <button onClick={fetchDevices}>Force Restart</button></p>\n        </div>\n      </div>\n      {wifiNetworks.length > 0 && (\n        <div className=\"wifi-popup\">\n          <h3>Select WiFi Network</h3>\n          <ul>\n            {wifiNetworks.map((network, index) => (\n              <li key={index} onClick={() => connectWifi(network.ssid, prompt('Enter password for ' + network.ssid))}>\n                {network.ssid}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}