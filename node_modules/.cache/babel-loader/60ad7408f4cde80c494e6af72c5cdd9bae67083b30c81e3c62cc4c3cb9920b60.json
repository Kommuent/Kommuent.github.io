{"ast":null,"code":"var _jsxFileName = \"/home/samuel/kommuent/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QRCode from 'qrcode.react';\nimport QrScanner from 'react-qr-scanner';\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrCodeData, setQrCodeData] = useState('');\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n  const startMirroring = async deviceId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n      console.log(response.data);\n      setQrCodeData(response.data.qrCodeData);\n    } catch (error) {\n      console.error('Error starting screen mirroring:', error);\n    }\n  };\n  const scanWifi = async deviceId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', {\n        ssid,\n        password\n      });\n      setWifiNetworks([]);\n      startMirroring(selectedDeviceId); // Start mirroring after connecting to WiFi\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n  const handleScan = async data => {\n    if (data) {\n      try {\n        await axios.post('http://localhost:4000/qr-mirror', {\n          data\n        });\n      } catch (error) {\n        console.error('Error starting mirroring via QR:', error);\n      }\n    }\n  };\n  const handleError = err => {\n    console.error(err);\n  };\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box green-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Android Devices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Android not found? Make sure \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"Android USB Debugging\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 43\n          }, this), \" is enabled. Windows users need to install \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"ADB Drivers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 123\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Using Android SDK ADB server. \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fetchDevices,\n            children: \"Force Restart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 44\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), devices.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Connected Devices:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: devices.map(device => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"device-list-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: showSerial ? device.id : device.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: playIcon,\n                alt: \"Play\",\n                className: \"icon\",\n                onClick: () => startMirroring(device.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: wifiIcon,\n                alt: \"WiFi\",\n                className: \"icon\",\n                onClick: () => scanWifi(device.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: forwardArrowIcon,\n                alt: \"Forward Arrow\",\n                className: \"icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 21\n              }, this)]\n            }, device.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box middle-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Connect by scanning the QR code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"qr-code\",\n          children: qrCodeData ? /*#__PURE__*/_jsxDEV(QRCode, {\n            value: qrCodeData,\n            size: 180\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Connect a device to generate QR code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QrScanner, {\n          delay: 300,\n          onError: handleError,\n          onScan: handleScan,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box blue-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"How to enable USB Debugging\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"[Your instructional video here]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"BV52e9O2FDbMrSE1HZZX+eVFs2E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","QRCode","QrScanner","wifiIcon","playIcon","forwardArrowIcon","jsxDEV","_jsxDEV","App","_s","devices","setDevices","showSerial","setShowSerial","wifiNetworks","setWifiNetworks","selectedDeviceId","setSelectedDeviceId","qrCodeData","setQrCodeData","fetchDevices","response","get","data","error","console","startMirroring","deviceId","log","scanWifi","connectWifi","ssid","password","post","handleScan","handleError","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","onClick","length","map","device","id","name","src","alt","value","size","delay","onError","onScan","style","width","_c","$RefreshReg$"],"sources":["/home/samuel/kommuent/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QRCode from 'qrcode.react';\nimport QrScanner from 'react-qr-scanner';\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\n\nfunction App() {\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrCodeData, setQrCodeData] = useState('');\n\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n\n  const startMirroring = async (deviceId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n      console.log(response.data);\n      setQrCodeData(response.data.qrCodeData);\n    } catch (error) {\n      console.error('Error starting screen mirroring:', error);\n    }\n  };\n\n  const scanWifi = async (deviceId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', { ssid, password });\n      setWifiNetworks([]);\n      startMirroring(selectedDeviceId); // Start mirroring after connecting to WiFi\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n\n  const handleScan = async (data) => {\n    if (data) {\n      try {\n        await axios.post('http://localhost:4000/qr-mirror', { data });\n      } catch (error) {\n        console.error('Error starting mirroring via QR:', error);\n      }\n    }\n  };\n\n  const handleError = (err) => {\n    console.error(err);\n  };\n\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"box green-box\">\n          <h2>Android Devices</h2>\n          <p>No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.</p>\n          <p>Android not found? Make sure <a href=\"#\">Android USB Debugging</a> is enabled. Windows users need to install <a href=\"#\">ADB Drivers</a>.</p>\n          <p>Using Android SDK ADB server. <button onClick={fetchDevices}>Force Restart</button></p>\n          {devices.length > 0 && (\n            <div>\n              <h3>Connected Devices:</h3>\n              <ul>\n                {devices.map(device => (\n                  <li key={device.id} className=\"device-list-item\">\n                    <span>{showSerial ? device.id : device.name}</span>\n                    <img\n                      src={playIcon}\n                      alt=\"Play\"\n                      className=\"icon\"\n                      onClick={() => startMirroring(device.id)}\n                    />\n                    <img\n                      src={wifiIcon}\n                      alt=\"WiFi\"\n                      className=\"icon\"\n                      onClick={() => scanWifi(device.id)}\n                    />\n                    <img\n                      src={forwardArrowIcon}\n                      alt=\"Forward Arrow\"\n                      className=\"icon\"\n                    />\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n        <div className=\"box middle-box\">\n          <h2>Connect by scanning the QR code</h2>\n          <div className=\"qr-code\">\n            {qrCodeData ? (\n              <QRCode value={qrCodeData} size={180} />\n            ) : (\n              <p>Connect a device to generate QR code</p>\n            )}\n          </div>\n          <QrScanner\n            delay={300}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: '100%' }}\n          />\n        </div>\n        <div className=\"box blue-box\">\n          <h2>How to enable USB Debugging</h2>\n          <p>[Your instructional video here]</p>\n          {/* Include your instructional video here */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}