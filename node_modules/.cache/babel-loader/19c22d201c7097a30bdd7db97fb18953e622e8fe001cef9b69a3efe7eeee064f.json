{"ast":null,"code":"var _jsxFileName = \"/home/samuel/kommuent/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QrScanner from 'react-qr-scanner';\nimport net from 'net'; // Import net for TCP/IP\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrData, setQrData] = useState('');\n  const [previousDevices, setPreviousDevices] = useState([]); // State to store previously connected devices\n  const [tcpClient, setTcpClient] = useState(null);\n  const [mirroringDeviceId, setMirroringDeviceId] = useState(null);\n\n  // Fetch devices connected via ADB\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n  const startMirroringUsb = async deviceId => {\n    try {\n      console.log(`Requesting mirroring for device: ${deviceId}`);\n      const response = await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n      console.log('QR Code data received:', response.data.qrCode);\n      setMirroringDeviceId(deviceId);\n\n      // Fetch the QR code for the device\n      const newQrData = `data:image/png;base64,${response.data.qrCode}`;\n      setQrData(newQrData);\n\n      // Store the device and its QR code in the previously connected devices list\n      setPreviousDevices(prev => [...prev.filter(device => device.id !== deviceId),\n      // Remove existing device entry if exists\n      {\n        id: deviceId,\n        qrCode: newQrData\n      }]);\n    } catch (error) {\n      console.error('Error starting screen mirroring via USB:', error);\n    }\n  };\n\n  // Scan for available WiFi networks\n  const scanWifi = async deviceId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n\n  // Connect to WiFi network and start mirroring via WiFi\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', {\n        ssid,\n        password,\n        deviceId: selectedDeviceId\n      });\n      setWifiNetworks([]);\n      startMirroringWifi(selectedDeviceId);\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n\n  // Start mirroring via WiFi\n  const startMirroringWifi = async deviceId => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', {\n        deviceId\n      });\n    } catch (error) {\n      console.error('Error starting screen mirroring via WiFi:', error);\n    }\n  };\n\n  // Handle QR code scanning and connect via TCP/IP\n  const handleScan = async data => {\n    if (data) {\n      setQrData(data);\n      try {\n        // Verify the QR code\n        const verificationResponse = await axios.post('http://localhost:4000/verify_qr', {\n          qrCode: data\n        });\n        if (verificationResponse.data.verified) {\n          const {\n            ip,\n            port\n          } = JSON.parse(data); // Extract IP and port from QR code data\n\n          // Create a TCP/IP client and connect\n          const client = new net.Socket();\n          client.connect(port, ip, () => {\n            console.log('Connected to server via QR code');\n            setTcpClient(client);\n          });\n          client.on('data', data => {\n            console.log('Data received from server:', data.toString());\n            // Handle screen data here\n          });\n          client.on('close', () => {\n            console.log('Connection closed');\n            setTcpClient(null);\n          });\n          client.on('error', error => {\n            console.error('Connection error:', error);\n            setTcpClient(null);\n          });\n        }\n      } catch (error) {\n        console.error('Error verifying QR code:', error);\n      }\n    }\n  };\n  const handleError = err => {\n    console.error(err);\n  };\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box green-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Android Devices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Android not found? Make sure \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"Android USB Debugging\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 43\n          }, this), \" is enabled. Windows users need to install \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            children: \"additional drivers.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 123\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box gray-box\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: playIcon,\n            alt: \"Play\",\n            className: \"icon\",\n            onClick: () => startMirroringUsb(selectedDeviceId)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: wifiIcon,\n            alt: \"WiFi\",\n            className: \"icon\",\n            onClick: () => scanWifi(selectedDeviceId)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: forwardArrowIcon,\n            alt: \"Forward\",\n            className: \"icon\",\n            onClick: () => setShowSerial(!showSerial)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box white-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Connect by Scanning the QR Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), qrData && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: qrData,\n          alt: \"QR Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), previousDevices.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box blue-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Previously Connected Devices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: previousDevices.map(device => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => setQrData(device.qrCode),\n            children: [\"Device \", device.id]\n          }, device.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(QrScanner, {\n        delay: 300,\n        onError: handleError,\n        onScan: handleScan,\n        style: {\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lJ0bsnxmRFTN9hTp3cYAWLqsTPI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","QrScanner","net","wifiIcon","playIcon","forwardArrowIcon","jsxDEV","_jsxDEV","App","_s","devices","setDevices","showSerial","setShowSerial","wifiNetworks","setWifiNetworks","selectedDeviceId","setSelectedDeviceId","qrData","setQrData","previousDevices","setPreviousDevices","tcpClient","setTcpClient","mirroringDeviceId","setMirroringDeviceId","fetchDevices","response","get","data","error","console","startMirroringUsb","deviceId","log","qrCode","newQrData","prev","filter","device","id","scanWifi","connectWifi","ssid","password","post","startMirroringWifi","handleScan","verificationResponse","verified","ip","port","JSON","parse","client","Socket","connect","on","toString","handleError","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","src","alt","onClick","length","map","delay","onError","onScan","style","width","_c","$RefreshReg$"],"sources":["/home/samuel/kommuent/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QrScanner from 'react-qr-scanner';\nimport net from 'net'; // Import net for TCP/IP\nimport './App.css';\nimport wifiIcon from './wifi_PNG62346.png';\nimport playIcon from './play_icon.png';\nimport forwardArrowIcon from './forward_arrow_icon.png';\n\nfunction App() {\n  const [devices, setDevices] = useState([]);\n  const [showSerial, setShowSerial] = useState(false);\n  const [wifiNetworks, setWifiNetworks] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState(null);\n  const [qrData, setQrData] = useState('');\n  const [previousDevices, setPreviousDevices] = useState([]); // State to store previously connected devices\n  const [tcpClient, setTcpClient] = useState(null);\n  const [mirroringDeviceId, setMirroringDeviceId] = useState(null);\n\n  // Fetch devices connected via ADB\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/devices');\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n\n  const startMirroringUsb = async (deviceId) => {\n    try {\n      console.log(`Requesting mirroring for device: ${deviceId}`);\n      const response = await axios.get(`http://localhost:4000/mirror/usb/${deviceId}`);\n      console.log('QR Code data received:', response.data.qrCode);\n\n      setMirroringDeviceId(deviceId);\n\n      // Fetch the QR code for the device\n      const newQrData = `data:image/png;base64,${response.data.qrCode}`;\n      setQrData(newQrData);\n\n      // Store the device and its QR code in the previously connected devices list\n      setPreviousDevices(prev => [\n        ...prev.filter(device => device.id !== deviceId), // Remove existing device entry if exists\n        { id: deviceId, qrCode: newQrData }\n      ]);\n    } catch (error) {\n      console.error('Error starting screen mirroring via USB:', error);\n    }\n  };\n\n  // Scan for available WiFi networks\n  const scanWifi = async (deviceId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/wifi/${deviceId}`);\n      setWifiNetworks(response.data);\n      setSelectedDeviceId(deviceId);\n    } catch (error) {\n      console.error('Error scanning WiFi networks:', error);\n    }\n  };\n\n  // Connect to WiFi network and start mirroring via WiFi\n  const connectWifi = async (ssid, password) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', { ssid, password, deviceId: selectedDeviceId });\n      setWifiNetworks([]);\n      startMirroringWifi(selectedDeviceId);\n    } catch (error) {\n      console.error('Error connecting to WiFi:', error);\n    }\n  };\n\n  // Start mirroring via WiFi\n  const startMirroringWifi = async (deviceId) => {\n    try {\n      await axios.post('http://localhost:4000/connect_wifi', { deviceId });\n    } catch (error) {\n      console.error('Error starting screen mirroring via WiFi:', error);\n    }\n  };\n\n  // Handle QR code scanning and connect via TCP/IP\n  const handleScan = async (data) => {\n    if (data) {\n      setQrData(data);\n      try {\n        // Verify the QR code\n        const verificationResponse = await axios.post('http://localhost:4000/verify_qr', { qrCode: data });\n        if (verificationResponse.data.verified) {\n          const { ip, port } = JSON.parse(data); // Extract IP and port from QR code data\n\n          // Create a TCP/IP client and connect\n          const client = new net.Socket();\n          client.connect(port, ip, () => {\n            console.log('Connected to server via QR code');\n            setTcpClient(client);\n          });\n\n          client.on('data', (data) => {\n            console.log('Data received from server:', data.toString());\n            // Handle screen data here\n          });\n\n          client.on('close', () => {\n            console.log('Connection closed');\n            setTcpClient(null);\n          });\n\n          client.on('error', (error) => {\n            console.error('Connection error:', error);\n            setTcpClient(null);\n          });\n        }\n      } catch (error) {\n        console.error('Error verifying QR code:', error);\n      }\n    }\n  };\n\n  const handleError = (err) => {\n    console.error(err);\n  };\n\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"box green-box\">\n          <h2>Android Devices</h2>\n          <p>No Android devices are connected. Please ensure the Android device is connected with a data cable, and USB Debugging is enabled.</p>\n          <p>Android not found? Make sure <a href=\"#\">Android USB Debugging</a> is enabled. Windows users need to install <a href=\"#\">additional drivers.</a></p>\n        </div>\n        <div className=\"box gray-box\">\n          <div className=\"icon-container\">\n            <img\n              src={playIcon}\n              alt=\"Play\"\n              className=\"icon\"\n              onClick={() => startMirroringUsb(selectedDeviceId)}\n            />\n            <img\n              src={wifiIcon}\n              alt=\"WiFi\"\n              className=\"icon\"\n              onClick={() => scanWifi(selectedDeviceId)}\n            />\n            <img\n              src={forwardArrowIcon}\n              alt=\"Forward\"\n              className=\"icon\"\n              onClick={() => setShowSerial(!showSerial)}\n            />\n          </div>\n        </div>\n        <div className=\"box white-box\">\n          <h2>Connect by Scanning the QR Code</h2>\n          {qrData && <img src={qrData} alt=\"QR Code\" />}\n        </div>\n        {previousDevices.length > 0 && (\n          <div className=\"box blue-box\">\n            <h2>Previously Connected Devices</h2>\n            <ul>\n              {previousDevices.map(device => (\n                <li key={device.id} onClick={() => setQrData(device.qrCode)}>\n                  Device {device.id}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        <QrScanner\n          delay={300}\n          onError={handleError}\n          onScan={handleScan}\n          style={{ width: '100%' }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}